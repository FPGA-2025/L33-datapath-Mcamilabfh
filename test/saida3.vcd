$date
	Tue Aug  5 20:53:39 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 8 " counter [7:0] $end
$var reg 32 # expected_result [31:0] $end
$var reg 1 $ rst_n $end
$scope module t $end
$var wire 1 ! clk $end
$var wire 1 $ rst_n $end
$var wire 1 % core_wr_en $end
$var wire 32 & core_wdata [31:0] $end
$var wire 32 ' core_rdata [31:0] $end
$var wire 1 ( core_rd_en $end
$var wire 32 ) core_addr [31:0] $end
$var parameter 96 * MEMORY_FILE $end
$scope module core_inst $end
$var wire 1 ! clk $end
$var wire 32 + data_o [31:0] $end
$var wire 1 ( rd_en_o $end
$var wire 32 , rs1_data [31:0] $end
$var wire 32 - rs2_data [31:0] $end
$var wire 1 $ rst_n $end
$var wire 1 % wr_en_o $end
$var wire 1 . reg_write $end
$var wire 1 / pc_write_cond $end
$var wire 1 0 pc_write $end
$var wire 1 1 pc_source $end
$var wire 32 2 pc_next [31:0] $end
$var wire 1 3 memory_to_reg $end
$var wire 1 4 mem_write_int $end
$var wire 1 5 mem_read_int $end
$var wire 1 6 lorD $end
$var wire 1 7 is_immediate $end
$var wire 1 8 ir_write $end
$var wire 32 9 imm_ext [31:0] $end
$var wire 32 : data_i [31:0] $end
$var wire 2 ; aluop [1:0] $end
$var wire 1 < alu_zero $end
$var wire 2 = alu_src_b [1:0] $end
$var wire 2 > alu_src_a [1:0] $end
$var wire 32 ? alu_result [31:0] $end
$var wire 32 @ alu_in2 [31:0] $end
$var wire 32 A alu_in1 [31:0] $end
$var wire 4 B alu_control_out [3:0] $end
$var wire 32 C addr_o [31:0] $end
$var reg 32 D A [31:0] $end
$var reg 32 E ALUOut [31:0] $end
$var reg 32 F B [31:0] $end
$var reg 32 G IR [31:0] $end
$var reg 32 H MDR [31:0] $end
$var reg 32 I PC [31:0] $end
$var reg 1 J prev_ir_write $end
$scope module alu_control_inst $end
$var wire 3 K FUNC3_i [2:0] $end
$var wire 7 L FUNC7_i [6:0] $end
$var wire 1 7 is_immediate_i $end
$var wire 2 M ALU_CO_i [1:0] $end
$var reg 4 N ALU_OP_o [3:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 4 O ALU_OP_i [3:0] $end
$var wire 32 P ALU_RS1_i [31:0] $end
$var wire 32 Q ALU_RS2_i [31:0] $end
$var wire 1 < ALU_ZR_o $end
$var parameter 4 R AND $end
$var parameter 4 S EQUAL $end
$var parameter 4 T GREATER_EQUAL $end
$var parameter 4 U GREATER_EQUAL_U $end
$var parameter 4 V NOR $end
$var parameter 4 W OR $end
$var parameter 4 X SHIFT_LEFT $end
$var parameter 4 Y SHIFT_RIGHT $end
$var parameter 4 Z SHIFT_RIGHT_A $end
$var parameter 4 [ SLT $end
$var parameter 4 \ SLT_U $end
$var parameter 4 ] SUB $end
$var parameter 4 ^ SUM $end
$var parameter 4 _ XOR $end
$var reg 32 ` ALU_RD_o [31:0] $end
$upscope $end
$scope module control_unit_inst $end
$var wire 1 ! clk $end
$var wire 7 a instruction_opcode [6:0] $end
$var wire 1 $ rst_n $end
$var parameter 4 b ALUWB $end
$var parameter 4 c AUIPC $end
$var parameter 4 d BRANCH $end
$var parameter 4 e DECODE $end
$var parameter 4 f EXECUTE $end
$var parameter 4 g FETCH $end
$var parameter 4 h JAL $end
$var parameter 4 i JALR $end
$var parameter 4 j LUI $end
$var parameter 4 k MEMADR $end
$var parameter 4 l MEMREAD $end
$var parameter 4 m MEMWB $end
$var parameter 4 n MEMWRITE $end
$var parameter 7 o OPC_AUIPC $end
$var parameter 7 p OPC_BRANCH $end
$var parameter 7 q OPC_ITYPE $end
$var parameter 7 r OPC_JAL $end
$var parameter 7 s OPC_JALR $end
$var parameter 7 t OPC_LUI $end
$var parameter 7 u OPC_LW $end
$var parameter 7 v OPC_RTYPE $end
$var parameter 7 w OPC_SW $end
$var reg 2 x alu_src_a [1:0] $end
$var reg 2 y alu_src_b [1:0] $end
$var reg 2 z aluop [1:0] $end
$var reg 1 8 ir_write $end
$var reg 1 7 is_immediate $end
$var reg 1 6 lorD $end
$var reg 1 5 memory_read $end
$var reg 1 3 memory_to_reg $end
$var reg 1 4 memory_write $end
$var reg 4 { next_state [3:0] $end
$var reg 1 1 pc_source $end
$var reg 1 0 pc_write $end
$var reg 1 / pc_write_cond $end
$var reg 1 . reg_write $end
$var reg 4 | state [3:0] $end
$upscope $end
$scope module imm_gen_inst $end
$var wire 32 } instr_i [31:0] $end
$var wire 7 ~ opcode [6:0] $end
$var wire 3 !" funct3 [2:0] $end
$var parameter 7 "" AUIPC_OPCODE $end
$var parameter 7 #" BRANCH_OPCODE $end
$var parameter 7 $" IMMEDIATE_OPCODE $end
$var parameter 7 %" JALR_OPCODE $end
$var parameter 7 &" JAL_OPCODE $end
$var parameter 7 '" LUI_OPCODE $end
$var parameter 7 (" LW_OPCODE $end
$var parameter 7 )" SW_OPCODE $end
$var reg 32 *" imm_o [31:0] $end
$upscope $end
$scope module regfile_inst $end
$var wire 5 +" RD_ADDR_i [4:0] $end
$var wire 5 ," RS1_ADDR_i [4:0] $end
$var wire 5 -" RS2_ADDR_i [4:0] $end
$var wire 1 ! clk $end
$var wire 32 ." data_i [31:0] $end
$var wire 1 . wr_en_i $end
$var wire 32 /" RS2_data_o [31:0] $end
$var wire 32 0" RS1_data_o [31:0] $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 1 1" ack_o $end
$var wire 32 2" addr_i [31:0] $end
$var wire 1 ! clk $end
$var wire 32 3" data_i [31:0] $end
$var wire 32 4" data_o [31:0] $end
$var wire 1 ( rd_en_i $end
$var wire 1 % wr_en_i $end
$var parameter 96 5" MEMORY_FILE $end
$var parameter 32 6" MEMORY_SIZE $end
$var integer 32 7" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000000000 6"
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 5"
b100011 )"
b11 ("
b110111 '"
b1101111 &"
b1100111 %"
b10011 $"
b1100011 #"
b10111 ""
b100011 w
b110011 v
b11 u
b110111 t
b1100111 s
b1101111 r
b10011 q
b1100011 p
b10111 o
b101 n
b100 m
b11 l
b10 k
b1100 j
b1010 i
b1001 h
b0 g
b110 f
b1 e
b1000 d
b1011 c
b111 b
b1000 _
b10 ^
b1010 ]
b1111 \
b1110 [
b111 Z
b101 Y
b100 X
b1 W
b1001 V
b1101 U
b1100 T
b11 S
b0 R
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 *
$end
#0
$dumpvars
b10000000000 7"
b100000000000001011101111 4"
b0 3"
b0 2"
11"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 !"
b0 ~
b0 }
b0 |
b1 {
b0 z
b1 y
b0 x
b0 a
b100 `
b100 Q
b0 P
b10 O
b10 N
b0 M
b0 L
b0 K
0J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b10 B
b0 A
b100 @
b100 ?
b0 >
b1 =
0<
b0 ;
b100000000000001011101111 :
b0 9
18
07
06
15
04
03
b100 2
01
10
0/
0.
b0 -
b0 ,
b0 +
b0 )
1(
b100000000000001011101111 '
b0 &
0%
0$
b0 #
b0 "
0!
$end
#1000
1!
#2000
0!
#3000
1!
#4000
0!
#5000
b1000 2
0<
b1000 ?
b1000 `
b1000 @
b1000 Q
bx -
bx /"
b10100000010100000100011 '
b10100000010100000100011 :
b10100000010100000100011 4"
b100 ."
b1101111 a
b1000 -"
b101 +"
b1000 9
b1000 *"
b1101111 ~
b100 )
b100 C
b100 2"
b1001 {
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
1J
b100 E
b100000000000001011101111 G
b100000000000001011101111 }
b100 I
b1 |
b1 "
1!
1$
#6000
0!
#7000
b100 ?
b100 `
b100 @
b100 Q
b100 2
b111 {
11
10
b1 =
b1 y
b10 >
b10 x
b1001 |
0J
bx &
bx +
bx 3"
bx F
b10 "
1!
#8000
0!
#9000
bx 2
x<
bx ?
bx `
bx @
bx Q
b100 A
b100 P
1.
b0 =
b0 y
b0 >
b0 x
01
00
b0 {
b111 |
b11 "
1!
#10000
0!
#11000
b1000 2
0<
b1000 ?
b1000 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b0 |
b100 "
1!
#12000
0!
#13000
0<
b10000 2
b10000 @
b10000 Q
b100 -
b100 /"
b10000 ?
b10000 `
b10100000100011 '
b10100000100011 :
b10100000100011 4"
b100011 a
b10 K
b101 -"
b10000 +"
b10000 9
b10000 *"
b100011 ~
b10 !"
b0 A
b0 P
b1000 )
b1000 C
b1000 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b10 {
1J
b10100000010100000100011 G
b10100000010100000100011 }
b1000 I
b1 |
b101 "
1!
#14000
0!
#15000
b10 =
b10 y
b1 >
b1 x
b101 {
b10000 ."
b10 |
0J
b10000 E
b100 &
b100 +
b100 3"
b100 F
b110 "
1!
#16000
0!
#17000
b10011 '
b10011 :
b10011 4"
b1100 2
b10000 )
b10000 C
b10000 2"
b1100 ?
b1100 `
b100 @
b100 Q
b1000 A
b1000 P
b0 {
16
1%
14
b0 =
b0 y
b0 >
b0 x
b101 |
b111 "
1!
#18000
0!
#19000
b1100 2
b1100 ?
b1100 `
b1000 )
b1000 C
b1000 2"
b100 @
b100 Q
b1 =
b1 y
10
18
1(
15
06
0%
04
b1 {
b0 |
b10100000100011 '
b10100000100011 :
b10100000100011 4"
b1000 "
1!
#20000
0!
#21000
0<
b10000 2
b10000 @
b10000 Q
b0 -
b0 /"
b10000 ?
b10000 `
b10011 '
b10011 :
b10011 4"
b1100 ."
b0 -"
b0 A
b0 P
b1100 )
b1100 C
b1100 2"
b10 {
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
1J
b1100 E
b10100000100011 G
b10100000100011 }
b1100 I
b1 |
b1001 "
1!
#22000
0!
#23000
b10 =
b10 y
b1 >
b1 x
b101 {
b10000 ."
b10 |
0J
b10000 E
b0 &
b0 +
b0 3"
b0 F
b1010 "
1!
#24000
0!
#25000
b100 '
b100 :
b100 4"
b1100 2
b10000 )
b10000 C
b10000 2"
b1100 ?
b1100 `
b0 @
b0 Q
b1100 A
b1100 P
b0 {
16
1%
14
b0 =
b0 y
b0 >
b0 x
b101 |
b1011 "
1!
#26000
0!
#27000
b10000 2
b10000 ?
b10000 `
b100 @
b100 Q
b1100 )
b1100 C
b1100 2"
b1 =
b1 y
10
18
1(
15
06
0%
04
b1 {
b0 |
b10011 '
b10011 :
b10011 4"
b1100 "
1!
#28000
0!
#29000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b0 '
b0 :
b0 4"
b10011 a
b0 K
b0 +"
b0 9
b0 *"
b10011 ~
b0 !"
b0 A
b0 P
b10000 )
b10000 C
b10000 2"
b110 {
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
1J
b10011 G
b10011 }
b10000 I
b1 |
b1101 "
1!
#30000
0!
#31000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b1110 "
1!
#32000
0!
#33000
b10000 2
0<
b10000 ?
b10000 `
b10000 A
b10000 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b1111 "
1!
#34000
0!
#35000
b10100 2
b10100 ?
b10100 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b10000 ."
b0 |
b10000 E
b10000 "
1!
#36000
0!
#37000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b10011 '
b10011 :
b10011 4"
b10100 ."
b0 a
b0 ~
b0 A
b0 P
b10100 )
b10100 C
b10100 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b0 {
1J
b10100 E
b0 G
b0 }
b10100 I
b1 |
b10001 "
1!
#38000
0!
#39000
b11000 2
b100 @
b100 Q
0<
b11000 ?
b11000 `
b10100 A
b10100 P
10
18
1(
15
b1 =
b1 y
b0 >
b0 x
b1 {
b0 ."
b0 |
0J
b0 E
b10010 "
1!
#40000
0!
#41000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b11000 ."
b10011 a
b10011 ~
b0 A
b0 P
b11000 )
b11000 C
b11000 2"
b110 {
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
1J
b11000 E
b10011 G
b10011 }
b11000 I
b1 |
b10011 "
1!
#42000
0!
#43000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b10100 "
1!
#44000
0!
#45000
b11000 2
0<
b11000 ?
b11000 `
b11000 A
b11000 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b10101 "
1!
#46000
0!
#47000
b11100 2
b11100 ?
b11100 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b11000 ."
b0 |
b11000 E
b10110 "
1!
#48000
0!
#49000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b11100 ."
b0 A
b0 P
b11100 )
b11100 C
b11100 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b11100 E
b11100 I
b1 |
b10111 "
1!
#50000
0!
#51000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b11000 "
1!
#52000
0!
#53000
b11100 2
0<
b11100 ?
b11100 `
b11100 A
b11100 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b11001 "
1!
#54000
0!
#55000
b100000 2
b100000 ?
b100000 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b11100 ."
b0 |
b11100 E
b11010 "
1!
#56000
0!
#57000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b100000 ."
b0 A
b0 P
b100000 )
b100000 C
b100000 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b100000 E
b100000 I
b1 |
b11011 "
1!
#58000
0!
#59000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b11100 "
1!
#60000
0!
#61000
b100000 2
0<
b100000 ?
b100000 `
b100000 A
b100000 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b11101 "
1!
#62000
0!
#63000
b100100 2
b100100 ?
b100100 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b100000 ."
b0 |
b100000 E
b11110 "
1!
#64000
0!
#65000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b100100 ."
b0 A
b0 P
b100100 )
b100100 C
b100100 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b100100 E
b100100 I
b1 |
b11111 "
1!
#66000
0!
#67000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b100000 "
1!
#68000
0!
#69000
b100100 2
0<
b100100 ?
b100100 `
b100100 A
b100100 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b100001 "
1!
#70000
0!
#71000
b101000 2
b101000 ?
b101000 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b100100 ."
b0 |
b100100 E
b100010 "
1!
#72000
0!
#73000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b101000 ."
b0 A
b0 P
b101000 )
b101000 C
b101000 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b101000 E
b101000 I
b1 |
b100011 "
1!
#74000
0!
#75000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b100100 "
1!
#76000
0!
#77000
b101000 2
0<
b101000 ?
b101000 `
b101000 A
b101000 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b100101 "
1!
#78000
0!
#79000
b101100 2
b101100 ?
b101100 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b101000 ."
b0 |
b101000 E
b100110 "
1!
#80000
0!
#81000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b101100 ."
b0 A
b0 P
b101100 )
b101100 C
b101100 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b101100 E
b101100 I
b1 |
b100111 "
1!
#82000
0!
#83000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b101000 "
1!
#84000
0!
#85000
b101100 2
0<
b101100 ?
b101100 `
b101100 A
b101100 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b101001 "
1!
#86000
0!
#87000
b110000 2
b110000 ?
b110000 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b101100 ."
b0 |
b101100 E
b101010 "
1!
#88000
0!
#89000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b110000 ."
b0 A
b0 P
b110000 )
b110000 C
b110000 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b110000 E
b110000 I
b1 |
b101011 "
1!
#90000
0!
#91000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b101100 "
1!
#92000
0!
#93000
b110000 2
0<
b110000 ?
b110000 `
b110000 A
b110000 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b101101 "
1!
#94000
0!
#95000
b110100 2
b110100 ?
b110100 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b110000 ."
b0 |
b110000 E
b101110 "
1!
#96000
0!
#97000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b110100 ."
b0 A
b0 P
b110100 )
b110100 C
b110100 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b110100 E
b110100 I
b1 |
b101111 "
1!
#98000
0!
#99000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
b110000 "
1!
#100000
0!
#101000
b110100 2
0<
b110100 ?
b110100 `
b110100 A
b110100 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
b110001 "
1!
#102000
0!
#103000
b111000 2
b111000 ?
b111000 `
b100 @
b100 Q
b1 {
b1 =
b1 y
10
18
1(
15
0.
b110100 ."
b0 |
b110100 E
b110010 "
1!
#104000
0!
#105000
1<
b0 2
b0 @
b0 Q
b0 ?
b0 `
b111000 ."
b0 A
b0 P
b111000 )
b111000 C
b111000 2"
b10 >
b10 x
b10 =
b10 y
0(
05
08
00
b110 {
1J
b111000 E
b111000 I
b1 |
b110011 "
1!
#106000
0!
#107000
b111 {
17
b10 ;
b10 M
b10 z
b10 =
b10 y
b1 >
b1 x
b0 ."
b110 |
0J
b0 E
1!
#108000
0!
#109000
b111000 2
0<
b111000 ?
b111000 `
b111000 A
b111000 P
1.
b0 =
b0 y
b0 >
b0 x
b0 ;
b0 M
b0 z
07
b0 {
b111 |
1!
